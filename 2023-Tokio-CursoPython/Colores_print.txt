reset = '\033[0m'
bold = '\033[01m'
disable = '\033[02m'
underline = '\033[04m'
reverse = '\033[07m'
 strikethrough = '\033[09m'
  invisible = '\033[08m'
 
   class fg:
        black = '\033[30m'
        red = '\033[31m'
        green = '\033[32m'
        orange = '\033[33m'
        blue = '\033[34m'
        purple = '\033[35m'
        cyan = '\033[36m'
        lightgrey = '\033[37m'
        darkgrey = '\033[90m'
        lightred = '\033[91m'
        lightgreen = '\033[92m'
        yellow = '\033[93m'
        lightblue = '\033[94m'
        pink = '\033[95m'
        lightcyan = '\033[96m'
 
    class bg:
        black = '\033[40m'
        red = '\033[41m'
        green = '\033[42m'
        orange = '\033[43m'
        blue = '\033[44m'
        purple = '\033[45m'
        cyan = '\033[46m'
        lightgrey = '\033[47m'


Ejemplos:
 def mostrar_pedido(self):
        print('\n')
        print(f"\033[32m\033[04m\033[01mPedido: {self.numero}" + f"\033[0m")
        print(f"El pedido \033[01m\033[36m{self.numero}\033[00m tiene los siguientes componentes:")
        for indice, producto in enumerate(self.productos):
            print(f"\t- Elemento {indice+1}: {producto.tipo} - {producto.codigo} - {producto.nombre} con un precio de {producto.precio} € x {self.cantidades[indice]} uds. ---> \033[31mSubtotal: {producto.precio * self.cantidades[indice]} €\033[00m")
        #*Calculamos el total de l pedido para mostrarlo a continuación
        self_total = self.total_pedido()
        print('\033[91m')
        print(f"\t\033[04m\033[01mEl total del pedido {self.numero} es {self.total} €\033[0m")
        print('\n')
    